// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:SysConfig.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// SysConfig TABLE
class TableSysConfig extends SqfEntityTableBase {
  TableSysConfig() {
    // declare properties of EntityTable
    tableName = 'sysConfig';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('key', DbType.text, isNotNull: true, isIndex: true),
      SqfEntityFieldBase('value', DbType.text, isNotNull: true),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSysConfig();
  }
}

// WebSite TABLE
class TableWebSite extends SqfEntityTableBase {
  TableWebSite() {
    // declare properties of EntityTable
    tableName = 'webSite';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('icon', DbType.text, defaultValue: ''),
      SqfEntityFieldBase('name', DbType.text,
          defaultValue: '', isNotNull: true),
      SqfEntityFieldBase('url', DbType.text, defaultValue: ''),
      SqfEntityFieldBase('webKey', DbType.text, defaultValue: ''),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableWebSite();
  }
}

// Password TABLE
class TablePassword extends SqfEntityTableBase {
  TablePassword() {
    // declare properties of EntityTable
    tableName = 'password';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('webKey', DbType.text),
      SqfEntityFieldBase('value', DbType.text, isNotNull: true),
      SqfEntityFieldBase('version', DbType.integer),
      SqfEntityFieldBase('isModify', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('isEncryption', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePassword();
  }
}

// Notebook TABLE
class TableNotebook extends SqfEntityTableBase {
  TableNotebook() {
    // declare properties of EntityTable
    tableName = 'notebook';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('isImportant', DbType.bool),
      SqfEntityFieldBase('number', DbType.integer),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('isModify', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableNotebook();
  }
}

// SysLog TABLE
class TableSysLog extends SqfEntityTableBase {
  TableSysLog() {
    // declare properties of EntityTable
    tableName = 'sysLog';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('content', DbType.text),
      SqfEntityFieldBase('dateCreated', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSysLog();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyPasswordManage extends SqfEntityModelProvider {
  MyPasswordManage() {
    databaseName = databaseModel.databaseName;
    password = databaseModel.password;
    dbVersion = databaseModel.dbVersion;
    preSaveAction = databaseModel.preSaveAction;
    logFunction = databaseModel.logFunction;
    databaseTables = [
      TableSysConfig.getInstance,
      TableWebSite.getInstance,
      TablePassword.getInstance,
      TableNotebook.getInstance,
      TableSysLog.getInstance,
    ];

    bundledDatabasePath = databaseModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = databaseModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region SysConfig
class SysConfig extends TableBase {
  SysConfig({this.id, this.key, this.value, this.dateCreated, this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  SysConfig.withFields(this.key, this.value, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  SysConfig.withId(
      this.id, this.key, this.value, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SysConfig.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['key'] != null) {
      key = o['key'].toString();
    }
    if (o['value'] != null) {
      value = o['value'].toString();
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (SysConfig)
  int? id;
  String? key;
  String? value;
  DateTime? dateCreated;
  bool? isDeleted;

  // end FIELDS (SysConfig)

  static const bool _softDeleteActivated = true;
  SysConfigManager? __mnSysConfig;

  SysConfigManager get _mnSysConfig {
    return __mnSysConfig = __mnSysConfig ?? SysConfigManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (key != null || !forView) {
      map['key'] = key;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (key != null || !forView) {
      map['key'] = key;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [SysConfig]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SysConfig]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      key,
      value,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      key,
      value,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<SysConfig>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SysConfig.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SysConfig>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SysConfig>[];
    try {
      objList = list
          .map((sysconfig) =>
              SysConfig.fromMap(sysconfig as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SysConfig.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SysConfig>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SysConfig> objList = <SysConfig>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SysConfig.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns SysConfig by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SysConfig] if exist, otherwise returns null
  Future<SysConfig?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    SysConfig? obj;
    final data = await _mnSysConfig.getById([id]);
    if (data.length != 0) {
      obj = SysConfig.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SysConfig) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSysConfig.insert(this, ignoreBatch);
    } else {
      await _mnSysConfig.update(this);
    }

    return id;
  }

  /// Saves the (SysConfig) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSysConfig.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSysConfig.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs SysConfig. Returns a new Primary Key value of SysConfig

  /// <returns>Returns a new Primary Key value of SysConfig
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SysConfig> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<SysConfig> sysconfigs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyPasswordManage().batchStart();
    for (final obj in sysconfigs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyPasswordManage().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < sysconfigs.length; i++) {
        if (sysconfigs[i].id == null) {
          sysconfigs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSysConfig.rawInsert(
          'INSERT OR REPLACE INTO sysConfig (id, key, value, dateCreated,isDeleted)  VALUES (?,?,?,?,?)',
          [
            id,
            key,
            value,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'SysConfig id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'SysConfig id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SysConfig Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SysConfig>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SysConfig> sysconfigs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnSysConfig.rawInsertAll(
        'INSERT OR REPLACE INTO sysConfig (id, key, value, dateCreated,isDeleted)  VALUES (?,?,?,?,?)',
        sysconfigs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes SysConfig

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SysConfig invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSysConfig
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSysConfig.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover SysConfig

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover SysConfig invoked (id=$id)');
    {
      return _mnSysConfig.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  SysConfigFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SysConfigFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SysConfigFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SysConfigFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    dateCreated = dateCreated ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sysconfig

// region SysConfigField
class SysConfigField extends FilterBase {
  SysConfigField(SysConfigFilterBuilder sysconfigFB) : super(sysconfigFB);

  @override
  SysConfigFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder isNull() {
    return super.isNull() as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SysConfigFilterBuilder;
  }

  @override
  SysConfigField get not {
    return super.not as SysConfigField;
  }
}
// endregion SysConfigField

// region SysConfigFilterBuilder
class SysConfigFilterBuilder extends ConjunctionBase {
  SysConfigFilterBuilder(SysConfig obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSysConfig = obj._mnSysConfig;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SysConfigManager? _mnSysConfig;

  /// put the sql keyword 'AND'
  @override
  SysConfigFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SysConfigFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SysConfigFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SysConfigFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SysConfigFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SysConfigFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SysConfigFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SysConfigFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SysConfigFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SysConfigFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SysConfigFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SysConfigField _setField(
      SysConfigField? field, String colName, DbType dbtype) {
    return SysConfigField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SysConfigField? _id;
  SysConfigField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SysConfigField? _key;
  SysConfigField get key {
    return _key = _setField(_key, 'key', DbType.text);
  }

  SysConfigField? _value;
  SysConfigField get value {
    return _value = _setField(_value, 'value', DbType.text);
  }

  SysConfigField? _dateCreated;
  SysConfigField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  SysConfigField? _isDeleted;
  SysConfigField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<SysConfig> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSysConfig!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSysConfig!.delete(qparams);
    }
    return r;
  }

  /// Recover List<SysConfig> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover SysConfig bulk invoked');
    return _mnSysConfig!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from sysConfig ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSysConfig!.updateBatch(qparams, values);
  }

  /// This method always returns [SysConfig] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SysConfig?
  @override
  Future<SysConfig?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSysConfig!.toList(qparams);
    final data = await objFuture;
    SysConfig? obj;
    if (data.isNotEmpty) {
      obj = SysConfig.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SysConfig]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SysConfig?
  @override
  Future<SysConfig> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SysConfig();
  }

  /// This method returns int. [SysConfig]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sysconfigCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sysconfigsFuture = await _mnSysConfig!.toList(qparams);
    final int count = sysconfigsFuture[0]['CNT'] as int;
    if (sysconfigCount != null) {
      sysconfigCount(count);
    }
    return count;
  }

  /// This method returns List<SysConfig> [SysConfig]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SysConfig>
  @override
  Future<List<SysConfig>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SysConfig> sysconfigsData = await SysConfig.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sysconfigsData;
  }

  /// This method returns Json String [SysConfig]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SysConfig]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SysConfig]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSysConfig!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SysConfig]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM sysConfig WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSysConfig!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SysConfig]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSysConfig!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SysConfig.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSysConfig!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SysConfigFilterBuilder

// region SysConfigFields
class SysConfigFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fKey;
  static TableField get key {
    return _fKey = _fKey ?? SqlSyntax.setField(_fKey, 'key', DbType.text);
  }

  static TableField? _fValue;
  static TableField get value {
    return _fValue =
        _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.text);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SysConfigFields

//region SysConfigManager
class SysConfigManager extends SqfEntityProvider {
  SysConfigManager()
      : super(MyPasswordManage(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sysConfig';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SysConfigManager
// region WebSite
class WebSite extends TableBase {
  WebSite(
      {this.id,
      this.icon,
      this.name,
      this.url,
      this.webKey,
      this.dateCreated,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  WebSite.withFields(this.icon, this.name, this.url, this.webKey,
      this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  WebSite.withId(this.id, this.icon, this.name, this.url, this.webKey,
      this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  WebSite.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['icon'] != null) {
      icon = o['icon'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['url'] != null) {
      url = o['url'].toString();
    }
    if (o['webKey'] != null) {
      webKey = o['webKey'].toString();
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (WebSite)
  int? id;
  String? icon;
  String? name;
  String? url;
  String? webKey;
  DateTime? dateCreated;
  bool? isDeleted;

  // end FIELDS (WebSite)

  static const bool _softDeleteActivated = true;
  WebSiteManager? __mnWebSite;

  WebSiteManager get _mnWebSite {
    return __mnWebSite = __mnWebSite ?? WebSiteManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (icon != null || !forView) {
      map['icon'] = icon;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (webKey != null || !forView) {
      map['webKey'] = webKey;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (icon != null || !forView) {
      map['icon'] = icon;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (webKey != null || !forView) {
      map['webKey'] = webKey;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [WebSite]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [WebSite]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      icon,
      name,
      url,
      webKey,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      icon,
      name,
      url,
      webKey,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<WebSite>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR WebSite.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<WebSite>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <WebSite>[];
    try {
      objList = list
          .map((website) => WebSite.fromMap(website as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR WebSite.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<WebSite>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<WebSite> objList = <WebSite>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = WebSite.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns WebSite by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [WebSite] if exist, otherwise returns null
  Future<WebSite?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    WebSite? obj;
    final data = await _mnWebSite.getById([id]);
    if (data.length != 0) {
      obj = WebSite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (WebSite) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnWebSite.insert(this, ignoreBatch);
    } else {
      await _mnWebSite.update(this);
    }

    return id;
  }

  /// Saves the (WebSite) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnWebSite.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnWebSite.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs WebSite. Returns a new Primary Key value of WebSite

  /// <returns>Returns a new Primary Key value of WebSite
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<WebSite> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<WebSite> websites,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyPasswordManage().batchStart();
    for (final obj in websites) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyPasswordManage().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < websites.length; i++) {
        if (websites[i].id == null) {
          websites[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnWebSite.rawInsert(
          'INSERT OR REPLACE INTO webSite (id, icon, name, url, webKey, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            icon,
            name,
            url,
            webKey,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'WebSite id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'WebSite id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'WebSite Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<WebSite>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<WebSite> websites,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnWebSite.rawInsertAll(
        'INSERT OR REPLACE INTO webSite (id, icon, name, url, webKey, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        websites,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes WebSite

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete WebSite invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnWebSite
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnWebSite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover WebSite

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover WebSite invoked (id=$id)');
    {
      return _mnWebSite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  WebSiteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return WebSiteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  WebSiteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return WebSiteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    icon = icon ?? '';
    name = name ?? '';
    url = url ?? '';
    webKey = webKey ?? '';
    dateCreated = dateCreated ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion website

// region WebSiteField
class WebSiteField extends FilterBase {
  WebSiteField(WebSiteFilterBuilder websiteFB) : super(websiteFB);

  @override
  WebSiteFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder isNull() {
    return super.isNull() as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as WebSiteFilterBuilder;
  }

  @override
  WebSiteField get not {
    return super.not as WebSiteField;
  }
}
// endregion WebSiteField

// region WebSiteFilterBuilder
class WebSiteFilterBuilder extends ConjunctionBase {
  WebSiteFilterBuilder(WebSite obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnWebSite = obj._mnWebSite;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  WebSiteManager? _mnWebSite;

  /// put the sql keyword 'AND'
  @override
  WebSiteFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  WebSiteFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  WebSiteFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  WebSiteFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  WebSiteFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  WebSiteFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  WebSiteFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  WebSiteFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  WebSiteFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  WebSiteFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  WebSiteFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  WebSiteField _setField(WebSiteField? field, String colName, DbType dbtype) {
    return WebSiteField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  WebSiteField? _id;
  WebSiteField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  WebSiteField? _icon;
  WebSiteField get icon {
    return _icon = _setField(_icon, 'icon', DbType.text);
  }

  WebSiteField? _name;
  WebSiteField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  WebSiteField? _url;
  WebSiteField get url {
    return _url = _setField(_url, 'url', DbType.text);
  }

  WebSiteField? _webKey;
  WebSiteField get webKey {
    return _webKey = _setField(_webKey, 'webKey', DbType.text);
  }

  WebSiteField? _dateCreated;
  WebSiteField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  WebSiteField? _isDeleted;
  WebSiteField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<WebSite> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnWebSite!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnWebSite!.delete(qparams);
    }
    return r;
  }

  /// Recover List<WebSite> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover WebSite bulk invoked');
    return _mnWebSite!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from webSite ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnWebSite!.updateBatch(qparams, values);
  }

  /// This method always returns [WebSite] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> WebSite?
  @override
  Future<WebSite?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnWebSite!.toList(qparams);
    final data = await objFuture;
    WebSite? obj;
    if (data.isNotEmpty) {
      obj = WebSite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [WebSite]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> WebSite?
  @override
  Future<WebSite> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        WebSite();
  }

  /// This method returns int. [WebSite]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? websiteCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final websitesFuture = await _mnWebSite!.toList(qparams);
    final int count = websitesFuture[0]['CNT'] as int;
    if (websiteCount != null) {
      websiteCount(count);
    }
    return count;
  }

  /// This method returns List<WebSite> [WebSite]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<WebSite>
  @override
  Future<List<WebSite>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<WebSite> websitesData = await WebSite.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return websitesData;
  }

  /// This method returns Json String [WebSite]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [WebSite]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [WebSite]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnWebSite!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [WebSite]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM webSite WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnWebSite!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [WebSite]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnWebSite!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await WebSite.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnWebSite!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion WebSiteFilterBuilder

// region WebSiteFields
class WebSiteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIcon;
  static TableField get icon {
    return _fIcon = _fIcon ?? SqlSyntax.setField(_fIcon, 'icon', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fUrl;
  static TableField get url {
    return _fUrl = _fUrl ?? SqlSyntax.setField(_fUrl, 'url', DbType.text);
  }

  static TableField? _fWebKey;
  static TableField get webKey {
    return _fWebKey =
        _fWebKey ?? SqlSyntax.setField(_fWebKey, 'webKey', DbType.text);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion WebSiteFields

//region WebSiteManager
class WebSiteManager extends SqfEntityProvider {
  WebSiteManager()
      : super(MyPasswordManage(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'webSite';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion WebSiteManager
// region Password
class Password extends TableBase {
  Password(
      {this.id,
      this.webKey,
      this.value,
      this.version,
      this.isModify,
      this.isEncryption,
      this.dateCreated,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Password.withFields(this.webKey, this.value, this.version, this.isModify,
      this.isEncryption, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  Password.withId(this.id, this.webKey, this.value, this.version, this.isModify,
      this.isEncryption, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Password.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['webKey'] != null) {
      webKey = o['webKey'].toString();
    }
    if (o['value'] != null) {
      value = o['value'].toString();
    }
    if (o['version'] != null) {
      version = int.tryParse(o['version'].toString());
    }
    if (o['isModify'] != null) {
      isModify =
          o['isModify'].toString() == '1' || o['isModify'].toString() == 'true';
    }
    if (o['isEncryption'] != null) {
      isEncryption = o['isEncryption'].toString() == '1' ||
          o['isEncryption'].toString() == 'true';
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Password)
  int? id;
  String? webKey;
  String? value;
  int? version;
  bool? isModify;
  bool? isEncryption;
  DateTime? dateCreated;
  bool? isDeleted;

  // end FIELDS (Password)

  static const bool _softDeleteActivated = true;
  PasswordManager? __mnPassword;

  PasswordManager get _mnPassword {
    return __mnPassword = __mnPassword ?? PasswordManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (webKey != null || !forView) {
      map['webKey'] = webKey;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (isModify != null) {
      map['isModify'] = forQuery ? (isModify! ? 1 : 0) : isModify;
    } else if (isModify != null || !forView) {
      map['isModify'] = null;
    }
    if (isEncryption != null) {
      map['isEncryption'] = forQuery ? (isEncryption! ? 1 : 0) : isEncryption;
    } else if (isEncryption != null || !forView) {
      map['isEncryption'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (webKey != null || !forView) {
      map['webKey'] = webKey;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (version != null || !forView) {
      map['version'] = version;
    }
    if (isModify != null) {
      map['isModify'] = forQuery ? (isModify! ? 1 : 0) : isModify;
    } else if (isModify != null || !forView) {
      map['isModify'] = null;
    }
    if (isEncryption != null) {
      map['isEncryption'] = forQuery ? (isEncryption! ? 1 : 0) : isEncryption;
    } else if (isEncryption != null || !forView) {
      map['isEncryption'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Password]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Password]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      webKey,
      value,
      version,
      isModify,
      isEncryption,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      webKey,
      value,
      version,
      isModify,
      isEncryption,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Password>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Password.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Password>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Password>[];
    try {
      objList = list
          .map((password) => Password.fromMap(password as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Password.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Password>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Password> objList = <Password>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Password.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Password by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Password] if exist, otherwise returns null
  Future<Password?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Password? obj;
    final data = await _mnPassword.getById([id]);
    if (data.length != 0) {
      obj = Password.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Password) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPassword.insert(this, ignoreBatch);
    } else {
      await _mnPassword.update(this);
    }

    return id;
  }

  /// Saves the (Password) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPassword.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPassword.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Password. Returns a new Primary Key value of Password

  /// <returns>Returns a new Primary Key value of Password
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Password> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Password> passwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyPasswordManage().batchStart();
    for (final obj in passwords) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyPasswordManage().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < passwords.length; i++) {
        if (passwords[i].id == null) {
          passwords[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPassword.rawInsert(
          'INSERT OR REPLACE INTO password (id, webKey, value, version, isModify, isEncryption, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
          [
            id,
            webKey,
            value,
            version,
            isModify,
            isEncryption,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Password id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Password id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Password Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Password>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Password> passwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnPassword.rawInsertAll(
        'INSERT OR REPLACE INTO password (id, webKey, value, version, isModify, isEncryption, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        passwords,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Password

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Password invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnPassword
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPassword.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Password

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Password invoked (id=$id)');
    {
      return _mnPassword.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  PasswordFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PasswordFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PasswordFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PasswordFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isModify = isModify ?? false;
    isEncryption = isEncryption ?? false;
    dateCreated = dateCreated ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion password

// region PasswordField
class PasswordField extends FilterBase {
  PasswordField(PasswordFilterBuilder passwordFB) : super(passwordFB);

  @override
  PasswordFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder isNull() {
    return super.isNull() as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PasswordFilterBuilder;
  }

  @override
  PasswordField get not {
    return super.not as PasswordField;
  }
}
// endregion PasswordField

// region PasswordFilterBuilder
class PasswordFilterBuilder extends ConjunctionBase {
  PasswordFilterBuilder(Password obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnPassword = obj._mnPassword;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PasswordManager? _mnPassword;

  /// put the sql keyword 'AND'
  @override
  PasswordFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PasswordFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PasswordFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PasswordFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PasswordFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PasswordFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PasswordFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PasswordFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PasswordFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PasswordFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PasswordFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PasswordField _setField(PasswordField? field, String colName, DbType dbtype) {
    return PasswordField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PasswordField? _id;
  PasswordField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  PasswordField? _webKey;
  PasswordField get webKey {
    return _webKey = _setField(_webKey, 'webKey', DbType.text);
  }

  PasswordField? _value;
  PasswordField get value {
    return _value = _setField(_value, 'value', DbType.text);
  }

  PasswordField? _version;
  PasswordField get version {
    return _version = _setField(_version, 'version', DbType.integer);
  }

  PasswordField? _isModify;
  PasswordField get isModify {
    return _isModify = _setField(_isModify, 'isModify', DbType.bool);
  }

  PasswordField? _isEncryption;
  PasswordField get isEncryption {
    return _isEncryption =
        _setField(_isEncryption, 'isEncryption', DbType.bool);
  }

  PasswordField? _dateCreated;
  PasswordField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  PasswordField? _isDeleted;
  PasswordField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Password> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPassword!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPassword!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Password> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Password bulk invoked');
    return _mnPassword!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from password ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPassword!.updateBatch(qparams, values);
  }

  /// This method always returns [Password] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Password?
  @override
  Future<Password?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPassword!.toList(qparams);
    final data = await objFuture;
    Password? obj;
    if (data.isNotEmpty) {
      obj = Password.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Password]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Password?
  @override
  Future<Password> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Password();
  }

  /// This method returns int. [Password]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? passwordCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final passwordsFuture = await _mnPassword!.toList(qparams);
    final int count = passwordsFuture[0]['CNT'] as int;
    if (passwordCount != null) {
      passwordCount(count);
    }
    return count;
  }

  /// This method returns List<Password> [Password]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Password>
  @override
  Future<List<Password>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Password> passwordsData = await Password.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return passwordsData;
  }

  /// This method returns Json String [Password]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Password]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Password]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPassword!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Password]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM password WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnPassword!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Password]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPassword!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Password.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPassword!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PasswordFilterBuilder

// region PasswordFields
class PasswordFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fWebKey;
  static TableField get webKey {
    return _fWebKey =
        _fWebKey ?? SqlSyntax.setField(_fWebKey, 'webKey', DbType.text);
  }

  static TableField? _fValue;
  static TableField get value {
    return _fValue =
        _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.text);
  }

  static TableField? _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.integer);
  }

  static TableField? _fIsModify;
  static TableField get isModify {
    return _fIsModify =
        _fIsModify ?? SqlSyntax.setField(_fIsModify, 'isModify', DbType.bool);
  }

  static TableField? _fIsEncryption;
  static TableField get isEncryption {
    return _fIsEncryption = _fIsEncryption ??
        SqlSyntax.setField(_fIsEncryption, 'isEncryption', DbType.bool);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PasswordFields

//region PasswordManager
class PasswordManager extends SqfEntityProvider {
  PasswordManager()
      : super(MyPasswordManage(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'password';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion PasswordManager
// region Notebook
class Notebook extends TableBase {
  Notebook(
      {this.id,
      this.isImportant,
      this.number,
      this.title,
      this.description,
      this.isModify,
      this.dateCreated,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Notebook.withFields(this.isImportant, this.number, this.title,
      this.description, this.isModify, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  Notebook.withId(this.id, this.isImportant, this.number, this.title,
      this.description, this.isModify, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Notebook.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['isImportant'] != null) {
      isImportant = o['isImportant'].toString() == '1' ||
          o['isImportant'].toString() == 'true';
    }
    if (o['number'] != null) {
      number = int.tryParse(o['number'].toString());
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['isModify'] != null) {
      isModify =
          o['isModify'].toString() == '1' || o['isModify'].toString() == 'true';
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Notebook)
  int? id;
  bool? isImportant;
  int? number;
  String? title;
  String? description;
  bool? isModify;
  DateTime? dateCreated;
  bool? isDeleted;

  // end FIELDS (Notebook)

  static const bool _softDeleteActivated = true;
  NotebookManager? __mnNotebook;

  NotebookManager get _mnNotebook {
    return __mnNotebook = __mnNotebook ?? NotebookManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (isImportant != null) {
      map['isImportant'] = forQuery ? (isImportant! ? 1 : 0) : isImportant;
    } else if (isImportant != null || !forView) {
      map['isImportant'] = null;
    }
    if (number != null || !forView) {
      map['number'] = number;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (isModify != null) {
      map['isModify'] = forQuery ? (isModify! ? 1 : 0) : isModify;
    } else if (isModify != null || !forView) {
      map['isModify'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (isImportant != null) {
      map['isImportant'] = forQuery ? (isImportant! ? 1 : 0) : isImportant;
    } else if (isImportant != null || !forView) {
      map['isImportant'] = null;
    }
    if (number != null || !forView) {
      map['number'] = number;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (isModify != null) {
      map['isModify'] = forQuery ? (isModify! ? 1 : 0) : isModify;
    } else if (isModify != null || !forView) {
      map['isModify'] = null;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Notebook]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Notebook]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      isImportant,
      number,
      title,
      description,
      isModify,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      isImportant,
      number,
      title,
      description,
      isModify,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Notebook>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Notebook.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Notebook>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Notebook>[];
    try {
      objList = list
          .map((notebook) => Notebook.fromMap(notebook as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Notebook.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Notebook>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Notebook> objList = <Notebook>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Notebook.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Notebook by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Notebook] if exist, otherwise returns null
  Future<Notebook?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Notebook? obj;
    final data = await _mnNotebook.getById([id]);
    if (data.length != 0) {
      obj = Notebook.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Notebook) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnNotebook.insert(this, ignoreBatch);
    } else {
      await _mnNotebook.update(this);
    }

    return id;
  }

  /// Saves the (Notebook) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnNotebook.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnNotebook.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Notebook. Returns a new Primary Key value of Notebook

  /// <returns>Returns a new Primary Key value of Notebook
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Notebook> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Notebook> notebooks,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyPasswordManage().batchStart();
    for (final obj in notebooks) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyPasswordManage().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < notebooks.length; i++) {
        if (notebooks[i].id == null) {
          notebooks[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnNotebook.rawInsert(
          'INSERT OR REPLACE INTO notebook (id, isImportant, number, title, description, isModify, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
          [
            id,
            isImportant,
            number,
            title,
            description,
            isModify,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Notebook id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Notebook id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Notebook Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Notebook>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Notebook> notebooks,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnNotebook.rawInsertAll(
        'INSERT OR REPLACE INTO notebook (id, isImportant, number, title, description, isModify, dateCreated,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        notebooks,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Notebook

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Notebook invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnNotebook
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnNotebook.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Notebook

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Notebook invoked (id=$id)');
    {
      return _mnNotebook.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  NotebookFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return NotebookFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  NotebookFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return NotebookFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isModify = isModify ?? false;
    dateCreated = dateCreated ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion notebook

// region NotebookField
class NotebookField extends FilterBase {
  NotebookField(NotebookFilterBuilder notebookFB) : super(notebookFB);

  @override
  NotebookFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder isNull() {
    return super.isNull() as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as NotebookFilterBuilder;
  }

  @override
  NotebookField get not {
    return super.not as NotebookField;
  }
}
// endregion NotebookField

// region NotebookFilterBuilder
class NotebookFilterBuilder extends ConjunctionBase {
  NotebookFilterBuilder(Notebook obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnNotebook = obj._mnNotebook;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  NotebookManager? _mnNotebook;

  /// put the sql keyword 'AND'
  @override
  NotebookFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  NotebookFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  NotebookFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  NotebookFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  NotebookFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  NotebookFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  NotebookFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  NotebookFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  NotebookFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  NotebookFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  NotebookFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  NotebookField _setField(NotebookField? field, String colName, DbType dbtype) {
    return NotebookField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  NotebookField? _id;
  NotebookField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  NotebookField? _isImportant;
  NotebookField get isImportant {
    return _isImportant = _setField(_isImportant, 'isImportant', DbType.bool);
  }

  NotebookField? _number;
  NotebookField get number {
    return _number = _setField(_number, 'number', DbType.integer);
  }

  NotebookField? _title;
  NotebookField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  NotebookField? _description;
  NotebookField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  NotebookField? _isModify;
  NotebookField get isModify {
    return _isModify = _setField(_isModify, 'isModify', DbType.bool);
  }

  NotebookField? _dateCreated;
  NotebookField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  NotebookField? _isDeleted;
  NotebookField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Notebook> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnNotebook!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnNotebook!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Notebook> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Notebook bulk invoked');
    return _mnNotebook!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from notebook ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnNotebook!.updateBatch(qparams, values);
  }

  /// This method always returns [Notebook] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Notebook?
  @override
  Future<Notebook?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnNotebook!.toList(qparams);
    final data = await objFuture;
    Notebook? obj;
    if (data.isNotEmpty) {
      obj = Notebook.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Notebook]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Notebook?
  @override
  Future<Notebook> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Notebook();
  }

  /// This method returns int. [Notebook]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? notebookCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final notebooksFuture = await _mnNotebook!.toList(qparams);
    final int count = notebooksFuture[0]['CNT'] as int;
    if (notebookCount != null) {
      notebookCount(count);
    }
    return count;
  }

  /// This method returns List<Notebook> [Notebook]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Notebook>
  @override
  Future<List<Notebook>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Notebook> notebooksData = await Notebook.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return notebooksData;
  }

  /// This method returns Json String [Notebook]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Notebook]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Notebook]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnNotebook!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Notebook]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM notebook WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnNotebook!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Notebook]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnNotebook!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Notebook.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnNotebook!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion NotebookFilterBuilder

// region NotebookFields
class NotebookFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIsImportant;
  static TableField get isImportant {
    return _fIsImportant = _fIsImportant ??
        SqlSyntax.setField(_fIsImportant, 'isImportant', DbType.bool);
  }

  static TableField? _fNumber;
  static TableField get number {
    return _fNumber =
        _fNumber ?? SqlSyntax.setField(_fNumber, 'number', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fIsModify;
  static TableField get isModify {
    return _fIsModify =
        _fIsModify ?? SqlSyntax.setField(_fIsModify, 'isModify', DbType.bool);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion NotebookFields

//region NotebookManager
class NotebookManager extends SqfEntityProvider {
  NotebookManager()
      : super(MyPasswordManage(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'notebook';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion NotebookManager
// region SysLog
class SysLog extends TableBase {
  SysLog({this.id, this.content, this.dateCreated, this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  SysLog.withFields(this.content, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  SysLog.withId(this.id, this.content, this.dateCreated, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SysLog.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['content'] != null) {
      content = o['content'].toString();
    }
    if (o['dateCreated'] != null) {
      dateCreated = int.tryParse(o['dateCreated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateCreated'].toString())!)
          : DateTime.tryParse(o['dateCreated'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (SysLog)
  int? id;
  String? content;
  DateTime? dateCreated;
  bool? isDeleted;

  // end FIELDS (SysLog)

  static const bool _softDeleteActivated = true;
  SysLogManager? __mnSysLog;

  SysLogManager get _mnSysLog {
    return __mnSysLog = __mnSysLog ?? SysLogManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (content != null || !forView) {
      map['content'] = content;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (content != null || !forView) {
      map['content'] = content;
    }
    if (dateCreated != null) {
      map['dateCreated'] = forJson
          ? dateCreated!.toString()
          : forQuery
              ? dateCreated!.millisecondsSinceEpoch
              : dateCreated;
    } else if (dateCreated != null || !forView) {
      map['dateCreated'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [SysLog]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SysLog]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      content,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      content,
      dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<SysLog>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SysLog.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SysLog>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SysLog>[];
    try {
      objList = list
          .map((syslog) => SysLog.fromMap(syslog as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SysLog.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SysLog>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SysLog> objList = <SysLog>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SysLog.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns SysLog by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SysLog] if exist, otherwise returns null
  Future<SysLog?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    SysLog? obj;
    final data = await _mnSysLog.getById([id]);
    if (data.length != 0) {
      obj = SysLog.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SysLog) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSysLog.insert(this, ignoreBatch);
    } else {
      await _mnSysLog.update(this);
    }

    return id;
  }

  /// Saves the (SysLog) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSysLog.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSysLog.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs SysLog. Returns a new Primary Key value of SysLog

  /// <returns>Returns a new Primary Key value of SysLog
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SysLog> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<SysLog> syslogs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyPasswordManage().batchStart();
    for (final obj in syslogs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyPasswordManage().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < syslogs.length; i++) {
        if (syslogs[i].id == null) {
          syslogs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSysLog.rawInsert(
          'INSERT OR REPLACE INTO sysLog (id, content, dateCreated,isDeleted)  VALUES (?,?,?,?)',
          [
            id,
            content,
            dateCreated != null ? dateCreated!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'SysLog id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'SysLog id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SysLog Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SysLog>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SysLog> syslogs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnSysLog.rawInsertAll(
        'INSERT OR REPLACE INTO sysLog (id, content, dateCreated,isDeleted)  VALUES (?,?,?,?)',
        syslogs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes SysLog

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SysLog invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSysLog
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSysLog.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover SysLog

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover SysLog invoked (id=$id)');
    {
      return _mnSysLog.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  SysLogFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SysLogFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SysLogFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SysLogFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    dateCreated = dateCreated ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion syslog

// region SysLogField
class SysLogField extends FilterBase {
  SysLogField(SysLogFilterBuilder syslogFB) : super(syslogFB);

  @override
  SysLogFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder isNull() {
    return super.isNull() as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SysLogFilterBuilder;
  }

  @override
  SysLogField get not {
    return super.not as SysLogField;
  }
}
// endregion SysLogField

// region SysLogFilterBuilder
class SysLogFilterBuilder extends ConjunctionBase {
  SysLogFilterBuilder(SysLog obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSysLog = obj._mnSysLog;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SysLogManager? _mnSysLog;

  /// put the sql keyword 'AND'
  @override
  SysLogFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SysLogFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SysLogFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SysLogFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SysLogFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SysLogFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SysLogFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SysLogFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SysLogFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SysLogFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SysLogFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SysLogField _setField(SysLogField? field, String colName, DbType dbtype) {
    return SysLogField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SysLogField? _id;
  SysLogField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SysLogField? _content;
  SysLogField get content {
    return _content = _setField(_content, 'content', DbType.text);
  }

  SysLogField? _dateCreated;
  SysLogField get dateCreated {
    return _dateCreated =
        _setField(_dateCreated, 'dateCreated', DbType.datetime);
  }

  SysLogField? _isDeleted;
  SysLogField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<SysLog> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSysLog!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSysLog!.delete(qparams);
    }
    return r;
  }

  /// Recover List<SysLog> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover SysLog bulk invoked');
    return _mnSysLog!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from sysLog ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSysLog!.updateBatch(qparams, values);
  }

  /// This method always returns [SysLog] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SysLog?
  @override
  Future<SysLog?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSysLog!.toList(qparams);
    final data = await objFuture;
    SysLog? obj;
    if (data.isNotEmpty) {
      obj = SysLog.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SysLog]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SysLog?
  @override
  Future<SysLog> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SysLog();
  }

  /// This method returns int. [SysLog]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? syslogCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final syslogsFuture = await _mnSysLog!.toList(qparams);
    final int count = syslogsFuture[0]['CNT'] as int;
    if (syslogCount != null) {
      syslogCount(count);
    }
    return count;
  }

  /// This method returns List<SysLog> [SysLog]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SysLog>
  @override
  Future<List<SysLog>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SysLog> syslogsData = await SysLog.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return syslogsData;
  }

  /// This method returns Json String [SysLog]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SysLog]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SysLog]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSysLog!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SysLog]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM sysLog WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSysLog!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SysLog]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSysLog!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SysLog.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSysLog!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SysLogFilterBuilder

// region SysLogFields
class SysLogFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fContent;
  static TableField get content {
    return _fContent =
        _fContent ?? SqlSyntax.setField(_fContent, 'content', DbType.text);
  }

  static TableField? _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SysLogFields

//region SysLogManager
class SysLogManager extends SqfEntityProvider {
  SysLogManager()
      : super(MyPasswordManage(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sysLog';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SysLogManager
class MyPasswordManageSequenceManager extends SqfEntityProvider {
  MyPasswordManageSequenceManager() : super(MyPasswordManage());
}
// END OF ENTITIES
